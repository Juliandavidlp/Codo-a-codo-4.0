#Definir una funci√≥n:

def hello_world():
    print('Hola mundo con funciones')


def sumar(a,b):
    resultado= a + b
    return resultado
    # return a+b

# hello_world()
# r = sumar(30)
# numero_1 = int(input('Ingrese un valor 1: '))
# numero_2 = int(input('Ingrese un valor 2: '))

# print(f'La suma es {sumar(numero_1,numero_2)}')

#Par√°metros por defecto:
def saludar(nombre="Pepe",saludo="Hola"):    
    print(f'{saludo}, {nombre}')

# saludar('Pedro','Buen d√≠a')
# saludar('Dami√°n')
# saludar()

#Indicando los argumentos de forma explicita:
# saludar(saludo="Buenas tardes",nombre="Nicol√°s")


"""
###Tipos de par√°metros en una funci√≥n de Python

A la hora de definir una funci√≥n, podemos indicar una serie de par√°metros.
Sin embargo, si al llamar a la funci√≥n no le pasamos todos sus argumentos,
el int√©rprete nos lanzar√° una excepci√≥n donde nos va a indicar que falta
un argumento posicional obligatorio y no se ha especificado.

#Par√°metros opcionales en una funci√≥n

Consideremos a continuaci√≥n la siguiente funci√≥n:

def saludo(nombre, mensaje="c√≥mo and√°s?"):
	print("Hola {}, {}".format(nombre, mensaje))
     
El par√°metro "nombre" no indica un valor por defecto, por lo tanto, es posicional u obligatorio. No ocurre lo mismo con el par√°metro "mensaje", cuyo valor por defecto es "c√≥mo and√°s?". 
En caso de no pasar este argumento, se tomar√° dicho valor por defecto. Por el contrario, si se indica, se sobreescribir√° con un nuevo valor pisado.

En una funci√≥n se pueden especificar tantos par√°metros opcionales como se quiera. Pero una vez que se indica uno, los dem√°s par√°metros a la derecha deben ser opcionales. 
Entonces, primero se colocan los par√°metros posicionales u obligatorios, despu√©s los par√°metros opcionales.


#Par√°metros posicionales y par√°metros con nombre en una funci√≥n:

Cuando invocamos una funci√≥n en Python con diferentes argumentos, los valores se asignan a los par√°metros en el orden que le indicamos.
Sin embargo, el orden se puede cambiar si llamamos a la funci√≥n a partir del nombre de los par√°metros. Para que lo veas m√°s claro, los siguientes ejemplos son todos v√°lidos.

saludo(mensaje="¬øc√≥mo est√°s?", nombre="Dami√°n")
#Hola Dami√°n, ¬øc√≥mo est√°s?

>>>saludo(nombre="Juli√°n", mensaje="¬øc√≥mo est√°s?")
#Hola Juli√°n, ¬øc√≥mo est√°s?

###Conclusi√≥n

Por defecto, al llamar a una funci√≥n los valores de los argumentos se asignan en el
mismo orden en el que se pasan al invocar a dicha funci√≥n.

Los par√°metros opcionales se indican con el operador ‚Äò=‚Äô, tienen un valor por defecto y siempre se definen despu√©s de los par√°metros obligatorios.
Se puede modificar el orden de los argumentos con el que se invoca a una funci√≥n si se indica el nombre de los par√°metros. Los par√°metros con nombre siempre aparecen despu√©s de los posicionales.
"""

#Definicion de una funci√≥n
def hello_world():
    print('Hola mundo con funciones üêç')

#Llamar la funci√≥n
hello_world()

#Una funci√≥n con parametros con un par√°metro por defecto
def show_movies(movies_list =[]):
    #Otra notaci√≥n:
    #def show_movies(movies_list:list =[]):
    """
    Funci√≥n para mostrar peliculas ~
    Parameter:
        movies_list (list): una lista de pel√≠culas.
    """
    if type(movies_list)== list:
        for movie in movies_list:
            print(f'Pelicula: {movie}')
    else:
        print('No envi√≥ una lista.')


movies = ["Batman","Avatar","Titanic","El padrino"]

#Llamar una funcion con un argumento:
#show_movies(movies)

# show_movies() Ojo, esto en este caso d√° error!
# show_movies(['lo que sea', 34, 68, 9])

movies = ["Batman","Avatar","Titanic","El padrino"]

#Llamar una funcion con un argumento:
#show_movies(movies)

# show_movies() Ojo, esto en este caso d√° error!
# show_movies(['lo que sea', 34, 68, 9])

#list_movies al ser una lista, pasa por referencia:
def add_movie(list_movies,movie):
    list_movies.append(movie)

add_movie(movies,'La llegada')
show_movies(movies)

#Una variable global
other_movie = 'Harry potter'

def add_movie_dos(list_movies):
    print(other_movie)
    my_movie = input('Ingrese una pelicula: ')
    list_movies.append(my_movie)
    
#add_movie_dos(movies)

#Calcular el promedio y devolver un valor con return:
ratings = [3,4,1,5,3,2]

def calc_average(ratings_list):
    sum_average = sum(ratings_list)
    avg =  sum_average / len(ratings_list)
    return avg

avg_calc = calc_average(ratings)
print(f'El promedio de calificaciones es: {avg_calc}')


